"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const immutable_1 = __importDefault(require("immutable"));
const rule_1 = __importDefault(require("./rule"));
const rules_1 = __importDefault(require("./rules"));
const defaultRules_1 = __importDefault(require("../constants/defaultRules"));
const inherits = require("util").inherits;
const SyntaxSetRecord = immutable_1.default.Record({
    name: String(),
    // @ts-ignore
    entryRule: new rule_1.default(),
    // @ts-ignore
    inline: new rules_1.default([]),
    // @ts-ignore
    blocks: new rules_1.default([]),
});
function SyntaxSet(name, def) {
    if (!(this instanceof SyntaxSet)) {
        // @ts-ignore
        return new SyntaxSet(name, def);
    }
    SyntaxSetRecord.call(this, {
        name: name,
        entryRule: def.entryRule,
        // @ts-ignore
        inline: new rules_1.default(def.inline),
        // @ts-ignore
        blocks: new rules_1.default(def.blocks),
    });
}
inherits(SyntaxSet, SyntaxSetRecord);
// ---- GETTERS ----
SyntaxSet.prototype.getEntryRule = function () {
    return this.get("entryRule") || defaultRules_1.default.documentRule;
};
SyntaxSet.prototype.getName = function () {
    return this.get("name");
};
SyntaxSet.prototype.getBlockRulesSet = function () {
    return this.get("blocks");
};
SyntaxSet.prototype.getInlineRulesSet = function () {
    return this.get("inline");
};
// ---- METHODS ----
SyntaxSet.prototype.getBlockRules = function () {
    return this.getBlockRulesSet().getRules();
};
SyntaxSet.prototype.getInlineRules = function () {
    return this.getInlineRulesSet().getRules();
};
SyntaxSet.prototype.getInlineRule = function (type) {
    const rulesSet = this.getInlineRulesSet();
    return rulesSet.getRule(type) || defaultRules_1.default.inlineRule;
};
SyntaxSet.prototype.getBlockRule = function (type) {
    const rulesSet = this.getBlockRulesSet();
    return rulesSet.getRule(type) || defaultRules_1.default.blockRule;
};
/**
 * Add a new rule to the inline set
 * @param {Rule} rule
 * @return {Syntax}
 */
SyntaxSet.prototype.addInlineRules = function (rule) {
    let rulesSet = this.getInlineRulesSet();
    rulesSet = rulesSet.add(rule);
    return this.set("inline", rulesSet);
};
/**
 * Add a new rule to the block set
 * @param {Rule} rule
 * @return {Syntax}
 */
SyntaxSet.prototype.addBlockRules = function (rule) {
    let rulesSet = this.getBlockRulesSet();
    rulesSet = rulesSet.add(rule);
    return this.set("inline", rulesSet);
};
exports.default = SyntaxSet;
