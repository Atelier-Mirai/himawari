"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const immutable_1 = __importDefault(require("immutable"));
const defaultRules_1 = __importDefault(require("../constants/defaultRules"));
const matchRule_1 = __importDefault(require("./matchRule"));
/**
 * Create a text token inline or block
 *
 * @param {ParsingState} state
 * @param {Boolean} isInline
 * @param {String} text
 * @return {Token}
 */
function createTextToken(state, isInline, text) {
    const rule = isInline ? defaultRules_1.default.inlineRule : defaultRules_1.default.blockRule;
    return matchRule_1.default(state, rule, text).get(0);
}
/**
 * Convert a normal text into a list of unstyled tokens (block or inline)
 *
 * @param {ParsingState} state
 * @param {Boolean} isInline
 * @param {String} text
 * @return {List<Token>}
 */
function textToUnstyledTokens(state, isInline, text) {
    if (!text) {
        return immutable_1.default.List();
    }
    let accu = "", c, wasNewLine = false;
    const result = [];
    function pushAccu() {
        const isEmpty = !accu.trim();
        const token = createTextToken(state, isInline, accu);
        accu = "";
        if (!isEmpty) {
            result.push(token);
        }
    }
    for (let i = 0; i < text.length; i++) {
        c = text[i];
        if (c !== "\n" && wasNewLine) {
            pushAccu();
        }
        accu += c;
        wasNewLine = c === "\n";
    }
    pushAccu();
    return immutable_1.default.List(result);
}
exports.default = textToUnstyledTokens;
